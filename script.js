// Language system
let currentLanguage = 'vi';

const translations = {
  vi: {
    nav: {
      home: 'Trang ch·ªß',
      skills: 'K·ªπ nƒÉng',
      test: 'Ki·ªÉm tra',
      progress: 'Ti·∫øn ƒë·ªô'
    },
    hero: {
      title: 'H·ªçc Ti·∫øng Anh Hi·ªáu Qu·∫£',
      subtitle: 'Ph√°t tri·ªÉn to√†n di·ªán 4 k·ªπ nƒÉng Nghe - N√≥i - ƒê·ªçc - Vi·∫øt v·ªõi ph∆∞∆°ng ph√°p h·ªçc t·∫≠p hi·ªán ƒë·∫°i',
      startButton: 'B·∫Øt ƒë·∫ßu h·ªçc',
      testButton: 'Ki·ªÉm tra tr√¨nh ƒë·ªô'
    },
    skills: {
      title: '4 K·ªπ NƒÉng Ti·∫øng Anh',
      listening: {
        title: 'Listening (Nghe)',
        description: 'R√®n luy·ªán kh·∫£ nƒÉng nghe hi·ªÉu qua c√°c b√†i t·∫≠p ƒëa d·∫°ng'
      },
      speaking: {
        title: 'Speaking (N√≥i)',
        description: 'Ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp v√† ph√°t √¢m chu·∫©n'
      },
      reading: {
        title: 'Reading (ƒê·ªçc)',
        description: 'N√¢ng cao kh·∫£ nƒÉng ƒë·ªçc hi·ªÉu v√† t·ª´ v·ª±ng'
      },
      writing: {
        title: 'Writing (Vi·∫øt)',
        description: 'Ho√†n thi·ªán k·ªπ nƒÉng vi·∫øt t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao'
      },
      levels: {
        beginner: 'C∆° b·∫£n',
        intermediate: 'Trung c·∫•p',
        advanced: 'N√¢ng cao'
      }
    },
    test: {
      title: 'Ki·ªÉm tra tr√¨nh ƒë·ªô ti·∫øng Anh',
      intro: 'B√†i ki·ªÉm tra ƒë√°nh gi√° tr√¨nh ƒë·ªô',
      description: 'B√†i ki·ªÉm tra g·ªìm 12 c√¢u h·ªèi v·ªÅ 4 k·ªπ nƒÉng (3 c√¢u/k·ªπ nƒÉng)',
      time: 'Th·ªùi gian: 30 ph√∫t',
      start: 'B·∫Øt ƒë·∫ßu ki·ªÉm tra',
      previous: 'C√¢u tr∆∞·ªõc',
      next: 'C√¢u ti·∫øp',
      finish: 'Ho√†n th√†nh',
      result: 'K·∫øt qu·∫£ ki·ªÉm tra',
      score: 'ƒêi·ªÉm s·ªë',
      level: 'Tr√¨nh ƒë·ªô',
      details: 'Chi ti·∫øt theo k·ªπ nƒÉng',
      startLearning: 'B·∫Øt ƒë·∫ßu h·ªçc'
    },
    progress: {
      title: 'Ti·∫øn ƒê·ªô H·ªçc T·∫≠p',
      completed: 'ho√†n th√†nh'
    },
    lesson: {
      lessons: 'B√†i gi·∫£ng',
      exercises: 'B√†i t·∫≠p',
      submit: 'N·ªôp b√†i',
      result: 'K·∫øt qu·∫£',
      excellent: 'Xu·∫•t s·∫Øc! üéâ',
      good: 'T·ªët! üëç',
      needPractice: 'C·∫ßn √¥n t·∫≠p th√™m! üìö'
    }
  },
  en: {
    nav: {
      home: 'Home',
      skills: 'Skills',
      test: 'Test',
      progress: 'Progress'
    },
    hero: {
      title: 'Learn English Effectively',
      subtitle: 'Develop all 4 skills - Listening, Speaking, Reading, Writing with modern learning methods',
      startButton: 'Start Learning',
      testButton: 'Take Level Test'
    },
    skills: {
      title: '4 English Skills',
      listening: {
        title: 'Listening',
        description: 'Practice listening comprehension through diverse exercises'
      },
      speaking: {
        title: 'Speaking',
        description: 'Develop communication skills and proper pronunciation'
      },
      reading: {
        title: 'Reading',
        description: 'Improve reading comprehension and vocabulary'
      },
      writing: {
        title: 'Writing',
        description: 'Perfect writing skills from basic to advanced'
      },
      levels: {
        beginner: 'Beginner',
        intermediate: 'Intermediate',
        advanced: 'Advanced'
      }
    },
    test: {
      title: 'English Level Test',
      intro: 'Level Assessment Test',
      description: 'The test includes 12 questions covering 4 skills (3 questions per skill)',
      time: 'Time: 30 minutes',
      start: 'Start Test',
      previous: 'Previous',
      next: 'Next',
      finish: 'Finish',
      result: 'Test Results',
      score: 'Score',
      level: 'Level',
      details: 'Details by skill',
      startLearning: 'Start Learning'
    },
    progress: {
      title: 'Learning Progress',
      completed: 'completed'
    },
    lesson: {
      lessons: 'Lessons',
      exercises: 'Exercises',
      submit: 'Submit',
      result: 'Result',
      excellent: 'Excellent! üéâ',
      good: 'Good! üëç',
      needPractice: 'Need more practice! üìö'
    }
  }
};

function getCurrentTranslation() {
  return translations[currentLanguage];
}

function switchLanguage() {
  currentLanguage = currentLanguage === 'vi' ? 'en' : 'vi';
  localStorage.setItem('preferredLanguage', currentLanguage);

  // Update language button
  const langBtn = document.querySelector('.language-btn span');
  if (langBtn) {
    langBtn.textContent = currentLanguage === 'vi' ? 'EN' : 'VI';
  }

  updatePageLanguage();

  // Re-attach event listeners after language update
  const startBtn = document.getElementById('start-learning-btn');
  const testBtn = document.getElementById('take-test-btn');

  if (startBtn) {
    startBtn.removeEventListener('click', scrollToSkills);
    startBtn.addEventListener('click', scrollToSkills);
  }
  if (testBtn) {
    testBtn.removeEventListener('click', goToTest);
    testBtn.addEventListener('click', goToTest);
  }
}

function updatePageLanguage() {
  const t = getCurrentTranslation();

  // Update navigation
  const navLinks = document.querySelectorAll('.nav-link');
  if (navLinks.length >= 4) {
    navLinks[0].textContent = t.nav.home;
    navLinks[1].textContent = t.nav.skills;
    navLinks[2].textContent = t.nav.test;
    navLinks[3].textContent = t.nav.progress;
  }  // Update hero section
  const heroTitle = document.querySelector('.hero-content h1');
  const heroSubtitle = document.querySelector('.hero-content p');
  const startBtn = document.getElementById('start-learning-btn');
  const testBtn = document.getElementById('take-test-btn');

  if (heroTitle) heroTitle.textContent = t.hero.title;
  if (heroSubtitle) heroSubtitle.textContent = t.hero.subtitle;
  if (startBtn) {
    const icon = startBtn.querySelector('i');
    const iconClass = icon ? icon.className : 'fas fa-play';
    startBtn.innerHTML = `<i class="${iconClass}"></i> ${t.hero.startButton}`;
  }
  if (testBtn) {
    const icon = testBtn.querySelector('i');
    const iconClass = icon ? icon.className : 'fas fa-clipboard-check';
    testBtn.innerHTML = `<i class="${iconClass}"></i> ${t.hero.testButton}`;
  }

  // Update skills section
  const skillsTitle = document.querySelector('.skills-section .section-title');
  if (skillsTitle) skillsTitle.textContent = t.skills.title;

  const skillCards = document.querySelectorAll('.skill-card');
  const skillKeys = ['listening', 'speaking', 'reading', 'writing'];

  skillCards.forEach((card, index) => {
    const skillKey = skillKeys[index];
    const title = card.querySelector('h3');
    const description = card.querySelector('p');
    const levelBtns = card.querySelectorAll('.level-btn');

    if (title && t.skills[skillKey]) title.textContent = t.skills[skillKey].title;
    if (description && t.skills[skillKey]) description.textContent = t.skills[skillKey].description;

    levelBtns.forEach((btn, levelIndex) => {
      const levelKeys = ['beginner', 'intermediate', 'advanced'];
      btn.textContent = t.skills.levels[levelKeys[levelIndex]];
    });
  });

  // Update progress section
  const progressTitle = document.querySelector('.progress-section .section-title');
  if (progressTitle) progressTitle.textContent = t.progress.title;

  const progressSpans = document.querySelectorAll('.progress-card span');
  progressSpans.forEach(span => {
    const text = span.textContent;
    const match = text.match(/(\d+)%/);
    if (match) {
      span.textContent = `${match[1]}% ${t.progress.completed}`;
    }
  });
}

function createLanguageSwitcher() {
  const header = document.querySelector('.header .container');
  const languageSwitch = document.createElement('div');
  languageSwitch.className = 'language-switch';
  languageSwitch.innerHTML = `
    <button class="language-btn" onclick="switchLanguage()">
      <i class="fas fa-globe"></i>
      <span>${currentLanguage === 'vi' ? 'EN' : 'VI'}</span>
    </button>
  `;
  header.appendChild(languageSwitch);
}

// Navigation functionality
document.addEventListener('DOMContentLoaded', function () {
  console.log('DOM Content Loaded');

  // Load saved language preference
  const savedLanguage = localStorage.getItem('preferredLanguage');
  if (savedLanguage) {
    currentLanguage = savedLanguage;
  }
  // Create language switcher
  createLanguageSwitcher();

  // Update page language
  updatePageLanguage();

  // Add event listeners for hero buttons
  const startBtn = document.getElementById('start-learning-btn');
  const testBtn = document.getElementById('take-test-btn');

  console.log('Start button:', startBtn);
  console.log('Test button:', testBtn);

  if (startBtn) {
    startBtn.addEventListener('click', scrollToSkills);
    console.log('Added event listener to start button');
  }
  if (testBtn) {
    testBtn.addEventListener('click', goToTest);
    console.log('Added event listener to test button');
  }

  // Smooth scrolling for navigation
  const navLinks = document.querySelectorAll('.nav-link');
  navLinks.forEach(link => {
    link.addEventListener('click', function (e) {
      e.preventDefault();
      const targetId = this.getAttribute('href').substring(1);
      const targetSection = document.getElementById(targetId);

      if (targetSection) {
        targetSection.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }

      // Update active nav link
      navLinks.forEach(l => l.classList.remove('active'));
      this.classList.add('active');
    });
  });

  // Initialize skill cards
  initSkillCards();

  // Initialize progress tracking
  initProgressTracking();
});

function scrollToSkills() {
  console.log('scrollToSkills called');
  document.getElementById('skills').scrollIntoView({
    behavior: 'smooth',
    block: 'start'
  });
}

function goToTest() {
  console.log('goToTest called');
  showTestModal();
}

// Lesson data for different skills and levels
const lessonData = {
  listening: {
    beginner: {
      lessons: [
        {
          title: "B√†i 1: Ch√†o h·ªèi c∆° b·∫£n",
          content: `
                        <h3>Greetings - Ch√†o h·ªèi</h3>
                        <p>Trong b√†i n√†y, b·∫°n s·∫Ω h·ªçc c√°ch ch√†o h·ªèi trong ti·∫øng Anh:</p>
                        <ul>
                            <li><strong>Hello</strong> - Xin ch√†o</li>
                            <li><strong>Good morning</strong> - Ch√†o bu·ªïi s√°ng</li>
                            <li><strong>Good afternoon</strong> - Ch√†o bu·ªïi chi·ªÅu</li>
                            <li><strong>Good evening</strong> - Ch√†o bu·ªïi t·ªëi</li>
                            <li><strong>How are you?</strong> - B·∫°n kh·ªèe kh√¥ng?</li>
                        </ul>
                        <p>üéß H√£y nghe v√† l·∫∑p l·∫°i c√°c c√¢u ch√†o h·ªèi n√†y.</p>
                    `
        },
        {
          title: "B√†i 2: Gi·ªõi thi·ªáu b·∫£n th√¢n",
          content: `
                        <h3>Self Introduction - Gi·ªõi thi·ªáu b·∫£n th√¢n</h3>
                        <p>H·ªçc c√°ch gi·ªõi thi·ªáu b·∫£n th√¢n b·∫±ng ti·∫øng Anh:</p>
                        <ul>
                            <li><strong>My name is...</strong> - T√™n t√¥i l√†...</li>
                            <li><strong>I am from...</strong> - T√¥i ƒë·∫øn t·ª´...</li>
                            <li><strong>I am ... years old</strong> - T√¥i ... tu·ªïi</li>
                            <li><strong>Nice to meet you</strong> - R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n</li>
                        </ul>
                        <p>üéß Nghe c√°c ƒëo·∫°n h·ªôi tho·∫°i gi·ªõi thi·ªáu v√† th·ª±c h√†nh.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Nghe ƒëo·∫°n h·ªôi tho·∫°i v√† ch·ªçn c√¢u tr·∫£ l·ªùi ƒë√∫ng. Ng∆∞·ªùi n√≥i ƒëang l√†m g√¨?",
          options: [
            "Ch√†o h·ªèi bu·ªïi s√°ng",
            "Gi·ªõi thi·ªáu b·∫£n th√¢n",
            "H·ªèi ƒë∆∞·ªùng",
            "ƒê·∫∑t h√†ng ƒë·ªì ƒÉn"
          ],
          correct: 0
        },
        {
          question: "Trong ƒëo·∫°n h·ªôi tho·∫°i v·ª´a nghe, ng∆∞·ªùi ph·ª• n·ªØ ƒë·∫øn t·ª´ ƒë√¢u?",
          options: [
            "Vietnam",
            "Korea",
            "Japan",
            "China"
          ],
          correct: 0
        }
      ]
    },
    intermediate: {
      lessons: [
        {
          title: "B√†i 1: H·ªôi tho·∫°i v·ªÅ c√¥ng vi·ªác",
          content: `
                        <h3>Job Conversations - H·ªôi tho·∫°i v·ªÅ c√¥ng vi·ªác</h3>
                        <p>H·ªçc c√°ch n√≥i v·ªÅ c√¥ng vi·ªác v√† ngh·ªÅ nghi·ªáp:</p>
                        <ul>
                            <li><strong>What do you do?</strong> - B·∫°n l√†m ngh·ªÅ g√¨?</li>
                            <li><strong>I work as a...</strong> - T√¥i l√†m ngh·ªÅ...</li>
                            <li><strong>Where do you work?</strong> - B·∫°n l√†m vi·ªác ·ªü ƒë√¢u?</li>
                            <li><strong>How long have you been working there?</strong> - B·∫°n ƒë√£ l√†m ·ªü ƒë√≥ bao l√¢u?</li>
                        </ul>
                        <p>üéß Nghe c√°c cu·ªôc ph·ªèng v·∫•n xin vi·ªác v√† th·∫£o lu·∫≠n v·ªÅ c√¥ng vi·ªác.</p>
                    `
        },
        {
          title: "B√†i 2: Mua s·∫Øm v√† thanh to√°n",
          content: `
                        <h3>Shopping and Payment - Mua s·∫Øm v√† thanh to√°n</h3>
                        <p>T·ª´ v·ª±ng v√† c·ª•m t·ª´ khi mua s·∫Øm:</p>
                        <ul>
                            <li><strong>How much is this?</strong> - C√°i n√†y gi√° bao nhi√™u?</li>
                            <li><strong>Can I pay by card?</strong> - T√¥i c√≥ th·ªÉ thanh to√°n b·∫±ng th·∫ª kh√¥ng?</li>
                            <li><strong>Do you have this in a different size?</strong> - B·∫°n c√≥ c√°i n√†y size kh√°c kh√¥ng?</li>
                            <li><strong>I'd like to return this</strong> - T√¥i mu·ªën tr·∫£ l·∫°i c√°i n√†y</li>
                        </ul>
                        <p>üéß Nghe c√°c cu·ªôc h·ªôi tho·∫°i trong c·ª≠a h√†ng v√† si√™u th·ªã.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Nghe ƒëo·∫°n h·ªôi tho·∫°i trong c·ª≠a h√†ng. Kh√°ch h√†ng mu·ªën mua g√¨?",
          options: [
            "M·ªôt chi·∫øc √°o s∆° mi",
            "M·ªôt ƒë√¥i gi√†y",
            "M·ªôt chi·∫øc t√∫i x√°ch",
            "M·ªôt chi·∫øc ƒë·ªìng h·ªì"
          ],
          correct: 1
        },
        {
          question: "Gi√° c·ªßa s·∫£n ph·∫©m l√† bao nhi√™u?",
          options: [
            "$45",
            "$54",
            "$65",
            "$56"
          ],
          correct: 2
        }
      ]
    },
    advanced: {
      lessons: [
        {
          title: "B√†i 1: Th·∫£o lu·∫≠n v·ªÅ m√¥i tr∆∞·ªùng",
          content: `
                        <h3>Environmental Discussions - Th·∫£o lu·∫≠n v·ªÅ m√¥i tr∆∞·ªùng</h3>
                        <p>T·ª´ v·ª±ng v√† c·ª•m t·ª´ v·ªÅ m√¥i tr∆∞·ªùng:</p>
                        <ul>
                            <li><strong>Climate change</strong> - Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u</li>
                            <li><strong>Renewable energy</strong> - NƒÉng l∆∞·ª£ng t√°i t·∫°o</li>
                            <li><strong>Carbon footprint</strong> - D·∫•u ch√¢n carbon</li>
                            <li><strong>Sustainable development</strong> - Ph√°t tri·ªÉn b·ªÅn v·ªØng</li>
                        </ul>
                        <p>üéß Nghe c√°c cu·ªôc th·∫£o lu·∫≠n chuy√™n s√¢u v·ªÅ v·∫•n ƒë·ªÅ m√¥i tr∆∞·ªùng.</p>
                    `
        },
        {
          title: "B√†i 2: Tin t·ª©c v√† th·ªùi s·ª±",
          content: `
                        <h3>News and Current Affairs - Tin t·ª©c v√† th·ªùi s·ª±</h3>
                        <p>Ph√°t tri·ªÉn kh·∫£ nƒÉng nghe hi·ªÉu tin t·ª©c:</p>
                        <ul>
                            <li><strong>Breaking news</strong> - Tin n√≥ng</li>
                            <li><strong>According to reports</strong> - Theo b√°o c√°o</li>
                            <li><strong>The latest update</strong> - C·∫≠p nh·∫≠t m·ªõi nh·∫•t</li>
                            <li><strong>In other news</strong> - Tin kh√°c</li>
                        </ul>
                        <p>üéß Nghe c√°c b·∫£n tin th·ªùi s·ª± v√† ph√¢n t√≠ch tin t·ª©c.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Nghe b·∫£n tin v·ªÅ bi·∫øn ƒë·ªïi kh√≠ h·∫≠u. Nhi·ªát ƒë·ªô to√†n c·∫ßu ƒë√£ tƒÉng bao nhi√™u trong th·∫ø k·ª∑ qua?",
          options: [
            "0.5¬∞C",
            "1.1¬∞C",
            "1.5¬∞C",
            "2.0¬∞C"
          ],
          correct: 1
        },
        {
          question: "Theo b·∫£n tin, gi·∫£i ph√°p ch√≠nh ƒë·ªÉ gi·∫£m ph√°t th·∫£i carbon l√† g√¨?",
          options: [
            "S·ª≠ d·ª•ng xe ƒëi·ªán",
            "NƒÉng l∆∞·ª£ng t√°i t·∫°o",
            "Tr·ªìng c√¢y xanh",
            "T·∫•t c·∫£ c√°c √Ω tr√™n"
          ],
          correct: 3
        }
      ]
    }
  },
  speaking: {
    beginner: {
      lessons: [
        {
          title: "B√†i 1: Ph√°t √¢m c∆° b·∫£n",
          content: `
                        <h3>Basic Pronunciation - Ph√°t √¢m c∆° b·∫£n</h3>
                        <p>H·ªçc c√°ch ph√°t √¢m c√°c √¢m c∆° b·∫£n trong ti·∫øng Anh:</p>
                        <ul>
                            <li><strong>/Œ∏/</strong> - think, three, thank</li>
                            <li><strong>/√∞/</strong> - this, that, they</li>
                            <li><strong>/ É/</strong> - she, wish, nation</li>
                            <li><strong>/t É/</strong> - chair, watch, teach</li>
                        </ul>
                        <p>üé§ Th·ª±c h√†nh ph√°t √¢m t·ª´ng √¢m v√† ghi √¢m ƒë·ªÉ so s√°nh.</p>
                    `
        },
        {
          title: "B√†i 2: Tr·ªçng √¢m t·ª´",
          content: `
                        <h3>Word Stress - Tr·ªçng √¢m t·ª´</h3>
                        <p>H·ªçc c√°ch ƒë·∫∑t tr·ªçng √¢m ƒë√∫ng:</p>
                        <ul>
                            <li><strong>'PICture</strong> - H√¨nh ·∫£nh (tr·ªçng √¢m √¢m ti·∫øt ƒë·∫ßu)</li>
                            <li><strong>de'CIDE</strong> - Quy·∫øt ƒë·ªãnh (tr·ªçng √¢m √¢m ti·∫øt cu·ªëi)</li>
                            <li><strong>'IMportant</strong> - Quan tr·ªçng</li>
                            <li><strong>infor'MAtion</strong> - Th√¥ng tin</li>
                        </ul>
                        <p>üé§ Luy·ªán t·∫≠p ph√°t √¢m v·ªõi tr·ªçng √¢m ch√≠nh x√°c.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Ph√°t √¢m t·ª´ 'think' v√† ch·ªçn √¢m b·∫Øt ƒë·∫ßu ƒë√∫ng:",
          options: [
            "/f/",
            "/Œ∏/",
            "/s/",
            "/t/"
          ],
          correct: 1
        },
        {
          question: "Tr·ªçng √¢m c·ªßa t·ª´ 'computer' r∆°i v√†o √¢m ti·∫øt n√†o?",
          options: [
            "com-",
            "-pu-",
            "-ter",
            "Kh√¥ng c√≥ tr·ªçng √¢m"
          ],
          correct: 1
        }
      ]
    },
    intermediate: {
      lessons: [
        {
          title: "B√†i 1: Tr√¨nh b√†y √Ω ki·∫øn",
          content: `
                        <h3>Expressing Opinions - Tr√¨nh b√†y √Ω ki·∫øn</h3>
                        <p>H·ªçc c√°ch b√†y t·ªè √Ω ki·∫øn m·ªôt c√°ch r√µ r√†ng:</p>
                        <ul>
                            <li><strong>I think that...</strong> - T√¥i nghƒ© r·∫±ng...</li>
                            <li><strong>In my opinion...</strong> - Theo √Ω ki·∫øn c·ªßa t√¥i...</li>
                            <li><strong>I believe...</strong> - T√¥i tin r·∫±ng...</li>
                            <li><strong>From my perspective...</strong> - T·ª´ g√≥c nh√¨n c·ªßa t√¥i...</li>
                        </ul>
                        <p>üé§ Th·ª±c h√†nh tr√¨nh b√†y √Ω ki·∫øn v·ªÅ c√°c ch·ªß ƒë·ªÅ kh√°c nhau.</p>
                    `
        },
        {
          title: "B√†i 2: K·ªÉ chuy·ªán",
          content: `
                        <h3>Storytelling - K·ªÉ chuy·ªán</h3>
                        <p>Ph√°t tri·ªÉn k·ªπ nƒÉng k·ªÉ chuy·ªán:</p>
                        <ul>
                            <li><strong>Once upon a time...</strong> - Ng√†y x·ª≠a ng√†y x∆∞a...</li>
                            <li><strong>First, then, finally...</strong> - ƒê·∫ßu ti√™n, sau ƒë√≥, cu·ªëi c√πng...</li>
                            <li><strong>Suddenly...</strong> - ƒê·ªôt nhi√™n...</li>
                            <li><strong>In the end...</strong> - Cu·ªëi c√πng...</li>
                        </ul>
                        <p>üé§ Luy·ªán t·∫≠p k·ªÉ c√°c c√¢u chuy·ªán ng·∫Øn v·ªõi c·∫•u tr√∫c r√µ r√†ng.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Ch·ªçn c·ª•m t·ª´ ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√¨nh b√†y √Ω ki·∫øn:",
          options: [
            "I am thinking...",
            "In my opinion...",
            "Maybe I think...",
            "I am believing..."
          ],
          correct: 1
        },
        {
          question: "Khi k·ªÉ chuy·ªán, t·ª´ n√†o d√πng ƒë·ªÉ ch·ªâ s·ª± thay ƒë·ªïi ƒë·ªôt ng·ªôt?",
          options: [
            "Then",
            "Suddenly",
            "After",
            "Finally"
          ],
          correct: 1
        }
      ]
    },
    advanced: {
      lessons: [
        {
          title: "B√†i 1: Thuy·∫øt tr√¨nh chuy√™n nghi·ªáp",
          content: `
                        <h3>Professional Presentations - Thuy·∫øt tr√¨nh chuy√™n nghi·ªáp</h3>
                        <p>K·ªπ nƒÉng thuy·∫øt tr√¨nh hi·ªáu qu·∫£:</p>
                        <ul>
                            <li><strong>Today I'm going to talk about...</strong> - H√¥m nay t√¥i s·∫Ω n√≥i v·ªÅ...</li>
                            <li><strong>Let me start by...</strong> - H√£y ƒë·ªÉ t√¥i b·∫Øt ƒë·∫ßu b·∫±ng...</li>
                            <li><strong>Moving on to...</strong> - Chuy·ªÉn sang...</li>
                            <li><strong>To conclude...</strong> - ƒê·ªÉ k·∫øt lu·∫≠n...</li>
                        </ul>
                        <p>üé§ Th·ª±c h√†nh thuy·∫øt tr√¨nh 5-10 ph√∫t v·ªÅ ch·ªß ƒë·ªÅ chuy√™n m√¥n.</p>
                    `
        },
        {
          title: "B√†i 2: Tranh lu·∫≠n v√† th·∫£o lu·∫≠n",
          content: `
                        <h3>Debate and Discussion - Tranh lu·∫≠n v√† th·∫£o lu·∫≠n</h3>
                        <p>K·ªπ nƒÉng tranh lu·∫≠n l·ªãch s·ª± v√† hi·ªáu qu·∫£:</p>
                        <ul>
                            <li><strong>I see your point, but...</strong> - T√¥i hi·ªÉu quan ƒëi·ªÉm c·ªßa b·∫°n, nh∆∞ng...</li>
                            <li><strong>That's a valid argument, however...</strong> - ƒê√≥ l√† l·∫≠p lu·∫≠n h·ª£p l√Ω, tuy nhi√™n...</li>
                            <li><strong>I respectfully disagree...</strong> - T√¥i kh√¥ng ƒë·ªìng √Ω m·ªôt c√°ch l·ªãch s·ª±...</li>
                            <li><strong>On the contrary...</strong> - Ng∆∞·ª£c l·∫°i...</li>
                        </ul>
                        <p>üé§ Tham gia tranh lu·∫≠n v·ªÅ c√°c v·∫•n ƒë·ªÅ x√£ h·ªôi.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "C·ª•m t·ª´ n√†o ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu m·ªôt b√†i thuy·∫øt tr√¨nh?",
          options: [
            "I want to say...",
            "Today I'm going to talk about...",
            "Let me tell you...",
            "I have something to say..."
          ],
          correct: 1
        },
        {
          question: "C√°ch l·ªãch s·ª± ƒë·ªÉ kh√¥ng ƒë·ªìng √Ω trong tranh lu·∫≠n:",
          options: [
            "You are wrong",
            "That's not right",
            "I respectfully disagree",
            "No, I don't think so"
          ],
          correct: 2
        }
      ]
    }
  },
  reading: {
    beginner: {
      lessons: [
        {
          title: "B√†i 1: ƒê·ªçc hi·ªÉu c∆° b·∫£n",
          content: `
                        <h3>Basic Reading Comprehension - ƒê·ªçc hi·ªÉu c∆° b·∫£n</h3>
                        <p>ƒê·ªçc ƒëo·∫°n vƒÉn sau v√† tr·∫£ l·ªùi c√¢u h·ªèi:</p>
                        <div style="background: #f0f8ff; padding: 1rem; border-left: 4px solid #2563eb; margin: 1rem 0;">
                            <p><strong>My Daily Routine</strong></p>
                            <p>My name is Sarah. I wake up at 6:00 AM every day. I brush my teeth and have breakfast at 7:00 AM. I go to work at 8:00 AM by bus. I work from 9:00 AM to 5:00 PM. After work, I go to the gym. I have dinner at 7:00 PM and go to bed at 10:00 PM.</p>
                        </div>
                        <p>üìñ H·ªçc c√°ch t√¨m th√¥ng tin c·ª• th·ªÉ trong ƒëo·∫°n vƒÉn.</p>
                    `
        },
        {
          title: "B√†i 2: T·ª´ v·ª±ng trong ng·ªØ c·∫£nh",
          content: `
                        <h3>Vocabulary in Context - T·ª´ v·ª±ng trong ng·ªØ c·∫£nh</h3>
                        <p>H·ªçc c√°ch ƒëo√°n nghƒ©a t·ª´ m·ªõi qua ng·ªØ c·∫£nh:</p>
                        <div style="background: #f0f8ff; padding: 1rem; border-left: 4px solid #2563eb; margin: 1rem 0;">
                            <p>The weather was <strong>terrible</strong> yesterday. It was raining heavily and very cold. Many people stayed at home because they didn't want to go out in such bad weather.</p>
                        </div>
                        <p>üìñ T·ª´ "terrible" c√≥ nghƒ©a l√† "t·ªá" d·ª±a v√†o ng·ªØ c·∫£nh.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Theo ƒëo·∫°n vƒÉn v·ªÅ Sarah, c√¥ ·∫•y ƒëi l√†m l√∫c m·∫•y gi·ªù?",
          options: [
            "6:00 AM",
            "7:00 AM",
            "8:00 AM",
            "9:00 AM"
          ],
          correct: 2
        },
        {
          question: "Sarah ƒëi l√†m b·∫±ng ph∆∞∆°ng ti·ªán g√¨?",
          options: [
            "Xe m√°y",
            "Xe bu√Ωt",
            "Xe h∆°i",
            "ƒêi b·ªô"
          ],
          correct: 1
        }
      ]
    },
    intermediate: {
      lessons: [
        {
          title: "B√†i 1: ƒê·ªçc b√°o ti·∫øng Anh",
          content: `
                        <h3>Reading English News - ƒê·ªçc b√°o ti·∫øng Anh</h3>
                        <p>ƒê·ªçc b√†i b√°o sau v·ªÅ c√¥ng ngh·ªá:</p>
                        <div style="background: #f0f8ff; padding: 1rem; border-left: 4px solid #2563eb; margin: 1rem 0;">
                            <p><strong>AI Technology in Education</strong></p>
                            <p>Artificial Intelligence (AI) is revolutionizing education worldwide. Schools are now using AI-powered tools to personalize learning experiences for students. These systems can identify each student's strengths and weaknesses, providing customized lessons that adapt to their learning pace. Teachers report that students are more engaged and achieve better results when using AI-assisted learning platforms.</p>
                        </div>
                        <p>üìñ Ph√¢n t√≠ch c·∫•u tr√∫c b√†i b√°o v√† t·ª´ v·ª±ng chuy√™n ng√†nh.</p>
                    `
        },
        {
          title: "B√†i 2: VƒÉn h·ªçc ƒë∆°n gi·∫£n",
          content: `
                        <h3>Simple Literature - VƒÉn h·ªçc ƒë∆°n gi·∫£n</h3>
                        <p>ƒê·ªçc ƒëo·∫°n tr√≠ch t·ª´ truy·ªán ng·∫Øn:</p>
                        <div style="background: #f0f8ff; padding: 1rem; border-left: 4px solid #2563eb; margin: 1rem 0;">
                            <p>The old man sat by the window, watching the rain fall gently on the garden. He remembered the days when he used to play in that same garden as a child. Time had passed so quickly, yet the garden remained unchanged. The roses still bloomed every spring, just as they did fifty years ago.</p>
                        </div>
                        <p>üìñ Ph√°t tri·ªÉn kh·∫£ nƒÉng hi·ªÉu ng√¥n ng·ªØ mang t√≠nh vƒÉn h·ªçc.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Theo b√†i b√°o, AI trong gi√°o d·ª•c gi√∫p g√¨?",
          options: [
            "Thay th·∫ø gi√°o vi√™n",
            "C√° nh√¢n h√≥a vi·ªác h·ªçc",
            "Gi·∫£m chi ph√≠ h·ªçc t·∫≠p",
            "TƒÉng s·ªë l∆∞·ª£ng h·ªçc sinh"
          ],
          correct: 1
        },
        {
          question: "Trong ƒëo·∫°n vƒÉn h·ªçc, ng∆∞·ªùi ƒë√†n √¥ng gi√† ƒëang l√†m g√¨?",
          options: [
            "ƒê·ªçc s√°ch",
            "Ng·ªß",
            "Ng·ªìi xem m∆∞a",
            "T∆∞·ªõi c√¢y"
          ],
          correct: 2
        }
      ]
    },
    advanced: {
      lessons: [
        {
          title: "B√†i 1: Ph√¢n t√≠ch h·ªçc thu·∫≠t",
          content: `
                        <h3>Academic Analysis - Ph√¢n t√≠ch h·ªçc thu·∫≠t</h3>
                        <p>ƒê·ªçc ƒëo·∫°n vƒÉn h·ªçc thu·∫≠t ph·ª©c t·∫°p:</p>
                        <div style="background: #f0f8ff; padding: 1rem; border-left: 4px solid #2563eb; margin: 1rem 0;">
                            <p><strong>Climate Change and Economic Impact</strong></p>
                            <p>The economic implications of climate change extend far beyond environmental concerns. Recent studies indicate that global warming could reduce worldwide economic output by 23% by 2100 if current trends continue. The agricultural sector faces the most immediate threats, with crop yields declining due to extreme weather patterns. Furthermore, coastal cities must invest billions in infrastructure to combat rising sea levels, creating significant fiscal burdens for municipal governments.</p>
                        </div>
                        <p>üìñ Ph√¢n t√≠ch l·∫≠p lu·∫≠n v√† d·ªØ li·ªáu trong vƒÉn b·∫£n h·ªçc thu·∫≠t.</p>
                    `
        },
        {
          title: "B√†i 2: VƒÉn h·ªçc c·ªï ƒëi·ªÉn",
          content: `
                        <h3>Classical Literature - VƒÉn h·ªçc c·ªï ƒëi·ªÉn</h3>
                        <p>ƒê·ªçc ƒëo·∫°n tr√≠ch t·ª´ t√°c ph·∫©m c·ªï ƒëi·ªÉn:</p>
                        <div style="background: #f0f8ff; padding: 1rem; border-left: 4px solid #2563eb; margin: 1rem 0;">
                            <p>"It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair."</p>
                            <p><em>- Charles Dickens, A Tale of Two Cities</em></p>
                        </div>
                        <p>üìñ Hi·ªÉu phong c√°ch v√† k·ªπ thu·∫≠t tu t·ª´ trong vƒÉn h·ªçc c·ªï ƒëi·ªÉn.</p>
                    `
        }
      ],
      exercises: [
        {
          question: "Theo ƒëo·∫°n vƒÉn h·ªçc thu·∫≠t, bi·∫øn ƒë·ªïi kh√≠ h·∫≠u c√≥ th·ªÉ gi·∫£m s·∫£n l∆∞·ª£ng kinh t·∫ø to√†n c·∫ßu bao nhi√™u?",
          options: [
            "15%",
            "20%",
            "23%",
            "25%"
          ],
          correct: 2
        },
        {
          question: "ƒêo·∫°n tr√≠ch c·ªßa Dickens s·ª≠ d·ª•ng k·ªπ thu·∫≠t tu t·ª´ n√†o?",
          options: [
            "·∫®n d·ª•",
            "ƒêi·ªáp t·ª´",
            "ƒê·ªëi l·∫≠p",
            "Nh√¢n h√≥a"
          ],
          correct: 2
        }
      ]
    }
  },
  writing: {
    beginner: {
      lessons: [
        {
          title: "B√†i 1: Vi·∫øt c√¢u c∆° b·∫£n",
          content: `
                        <h3>Basic Sentence Writing - Vi·∫øt c√¢u c∆° b·∫£n</h3>
                        <p>H·ªçc c√°ch t·∫°o c√¢u ho√†n ch·ªânh v·ªõi c·∫•u tr√∫c S-V-O:</p>
                        <ul>
                            <li><strong>Subject + Verb + Object</strong></li>
                            <li>I (S) + eat (V) + breakfast (O)</li>
                            <li>She (S) + reads (V) + books (O)</li>
                            <li>We (S) + play (V) + football (O)</li>
                        </ul>
                        <p>‚úçÔ∏è Vi·∫øt 5 c√¢u ƒë∆°n gi·∫£n theo c·∫•u tr√∫c S-V-O.</p>
                        <textarea placeholder="Vi·∫øt c√¢u c·ªßa b·∫°n ·ªü ƒë√¢y..." style="width: 100%; height: 100px; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; margin-top: 1rem;"></textarea>
                    `
        },
        {
          title: "B√†i 2: Vi·∫øt ƒëo·∫°n vƒÉn ng·∫Øn",
          content: `
                        <h3>Short Paragraph Writing - Vi·∫øt ƒëo·∫°n vƒÉn ng·∫Øn</h3>
                        <p>C·∫•u tr√∫c ƒëo·∫°n vƒÉn c∆° b·∫£n:</p>
                        <ul>
                            <li><strong>Topic sentence</strong> - C√¢u ch·ªß ƒë·ªÅ</li>
                            <li><strong>Supporting sentences</strong> - C√¢u h·ªó tr·ª£</li>
                            <li><strong>Concluding sentence</strong> - C√¢u k·∫øt lu·∫≠n</li>
                        </ul>
                        <p>‚úçÔ∏è Vi·∫øt m·ªôt ƒëo·∫°n vƒÉn v·ªÅ ng√†y c·ªßa b·∫°n (50-70 t·ª´).</p>
                        <textarea placeholder="Vi·∫øt ƒëo·∫°n vƒÉn c·ªßa b·∫°n ·ªü ƒë√¢y..." style="width: 100%; height: 150px; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; margin-top: 1rem;"></textarea>
                    `
        }
      ],
      exercises: [
        {
          question: "Ch·ªçn c√¢u c√≥ c·∫•u tr√∫c S-V-O ƒë√∫ng:",
          options: [
            "Eat I breakfast",
            "I eat breakfast",
            "Breakfast eat I",
            "I breakfast eat"
          ],
          correct: 1
        },
        {
          question: "Trong ƒëo·∫°n vƒÉn, c√¢u n√†o th∆∞·ªùng ƒë·ª©ng ƒë·∫ßu?",
          options: [
            "C√¢u k·∫øt lu·∫≠n",
            "C√¢u h·ªó tr·ª£",
            "C√¢u ch·ªß ƒë·ªÅ",
            "C√¢u chuy·ªÉn ti·∫øp"
          ],
          correct: 2
        }
      ]
    },
    intermediate: {
      lessons: [
        {
          title: "B√†i 1: Vi·∫øt email ch√≠nh th·ª©c",
          content: `
                        <h3>Formal Email Writing - Vi·∫øt email ch√≠nh th·ª©c</h3>
                        <p>C·∫•u tr√∫c email ch√≠nh th·ª©c:</p>
                        <ul>
                            <li><strong>Subject:</strong> Ch·ªß ƒë·ªÅ r√µ r√†ng</li>
                            <li><strong>Greeting:</strong> Dear Mr./Ms. [Name]</li>
                            <li><strong>Body:</strong> N·ªôi dung ch√≠nh</li>
                            <li><strong>Closing:</strong> Best regards, Sincerely</li>
                        </ul>
                        <p>‚úçÔ∏è Vi·∫øt email xin vi·ªác (150-200 t·ª´).</p>
                        <textarea placeholder="Vi·∫øt email c·ªßa b·∫°n ·ªü ƒë√¢y..." style="width: 100%; height: 200px; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; margin-top: 1rem;"></textarea>
                    `
        },
        {
          title: "B√†i 2: Vi·∫øt b√†i lu·∫≠n √Ω ki·∫øn",
          content: `
                        <h3>Opinion Essay - B√†i lu·∫≠n √Ω ki·∫øn</h3>
                        <p>C·∫•u tr√∫c b√†i lu·∫≠n √Ω ki·∫øn:</p>
                        <ul>
                            <li><strong>Introduction:</strong> Gi·ªõi thi·ªáu ch·ªß ƒë·ªÅ v√† quan ƒëi·ªÉm</li>
                            <li><strong>Body paragraphs:</strong> L·∫≠p lu·∫≠n v√† v√≠ d·ª•</li>
                            <li><strong>Conclusion:</strong> T√≥m t·∫Øt v√† kh·∫≥ng ƒë·ªãnh l·∫°i quan ƒëi·ªÉm</li>
                        </ul>
                        <p>‚úçÔ∏è Vi·∫øt b√†i lu·∫≠n v·ªÅ "L·ª£i √≠ch c·ªßa vi·ªác h·ªçc ti·∫øng Anh" (250-300 t·ª´).</p>
                        <textarea placeholder="Vi·∫øt b√†i lu·∫≠n c·ªßa b·∫°n ·ªü ƒë√¢y..." style="width: 100%; height: 250px; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; margin-top: 1rem;"></textarea>
                    `
        }
      ],
      exercises: [
        {
          question: "C√°ch ch√†o trong email ch√≠nh th·ª©c:",
          options: [
            "Hi there!",
            "Hello!",
            "Dear Sir/Madam,",
            "Hey!"
          ],
          correct: 2
        },
        {
          question: "Trong b√†i lu·∫≠n √Ω ki·∫øn, ƒë√¢u l√† ph·∫ßn quan tr·ªçng nh·∫•t?",
          options: [
            "M·ªü b√†i",
            "Th√¢n b√†i v·ªõi l·∫≠p lu·∫≠n",
            "K·∫øt b√†i",
            "Ti√™u ƒë·ªÅ"
          ],
          correct: 1
        }
      ]
    },
    advanced: {
      lessons: [
        {
          title: "B√†i 1: Vi·∫øt b√°o c√°o chuy√™n nghi·ªáp",
          content: `
                        <h3>Professional Report Writing - Vi·∫øt b√°o c√°o chuy√™n nghi·ªáp</h3>
                        <p>C·∫•u tr√∫c b√°o c√°o chuy√™n nghi·ªáp:</p>
                        <ul>
                            <li><strong>Executive Summary</strong> - T√≥m t·∫Øt ƒëi·ªÅu h√†nh</li>
                            <li><strong>Introduction</strong> - Gi·ªõi thi·ªáu</li>
                            <li><strong>Methodology</strong> - Ph∆∞∆°ng ph√°p</li>
                            <li><strong>Findings</strong> - Ph√°t hi·ªán</li>
                            <li><strong>Recommendations</strong> - Khuy·∫øn ngh·ªã</li>
                        </ul>
                        <p>‚úçÔ∏è Vi·∫øt b√°o c√°o v·ªÅ t√¨nh h√¨nh kinh t·∫ø (400-500 t·ª´).</p>
                        <textarea placeholder="Vi·∫øt b√°o c√°o c·ªßa b·∫°n ·ªü ƒë√¢y..." style="width: 100%; height: 300px; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; margin-top: 1rem;"></textarea>
                    `
        },
        {
          title: "B√†i 2: Vi·∫øt b√†i nghi√™n c·ª©u",
          content: `
                        <h3>Research Paper Writing - Vi·∫øt b√†i nghi√™n c·ª©u</h3>
                        <p>C√°c y·∫øu t·ªë c·ªßa b√†i nghi√™n c·ª©u:</p>
                        <ul>
                            <li><strong>Abstract</strong> - T√≥m t·∫Øt</li>
                            <li><strong>Literature Review</strong> - T·ªïng quan t√†i li·ªáu</li>
                            <li><strong>Research Questions</strong> - C√¢u h·ªèi nghi√™n c·ª©u</li>
                            <li><strong>Analysis</strong> - Ph√¢n t√≠ch</li>
                            <li><strong>Conclusion</strong> - K·∫øt lu·∫≠n</li>
                        </ul>
                        <p>‚úçÔ∏è Vi·∫øt ph·∫ßn Abstract cho nghi√™n c·ª©u v·ªÅ AI (150-200 t·ª´).</p>
                        <textarea placeholder="Vi·∫øt Abstract c·ªßa b·∫°n ·ªü ƒë√¢y..." style="width: 100%; height: 200px; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; margin-top: 1rem;"></textarea>
                    `
        }
      ],
      exercises: [
        {
          question: "Ph·∫ßn n√†o c·ªßa b√°o c√°o n√™n vi·∫øt cu·ªëi c√πng?",
          options: [
            "Introduction",
            "Methodology",
            "Executive Summary",
            "Findings"
          ],
          correct: 2
        },
        {
          question: "Abstract trong b√†i nghi√™n c·ª©u th∆∞·ªùng c√≥ bao nhi√™u t·ª´?",
          options: [
            "50-100 t·ª´",
            "150-250 t·ª´",
            "300-400 t·ª´",
            "500+ t·ª´"
          ],
          correct: 1
        }
      ]
    }
  }
};

// Test questions for skill assessment
const testQuestions = {
  listening: [
    {
      question: "Nghe ƒëo·∫°n h·ªôi tho·∫°i. Ng∆∞·ªùi ƒë√†n √¥ng ƒëang l√†m g√¨?",
      options: ["ƒê·∫∑t h√†ng ƒë·ªì ƒÉn", "H·ªèi ƒë∆∞·ªùng", "Mua v√© xem phim", "Thanh to√°n h√≥a ƒë∆°n"],
      correct: 0,
      level: "beginner"
    },
    {
      question: "Trong cu·ªôc h·ªçp, v·∫•n ƒë·ªÅ ch√≠nh ƒë∆∞·ª£c th·∫£o lu·∫≠n l√† g√¨?",
      options: ["TƒÉng l∆∞∆°ng", "D·ª± √°n m·ªõi", "Thay ƒë·ªïi vƒÉn ph√≤ng", "ƒê√†o t·∫°o nh√¢n vi√™n"],
      correct: 1,
      level: "intermediate"
    },
    {
      question: "Theo b·∫£n tin, t√°c ƒë·ªông c·ªßa bi·∫øn ƒë·ªïi kh√≠ h·∫≠u ƒë·∫øn n√¥ng nghi·ªáp l√† g√¨?",
      options: ["TƒÉng nƒÉng su·∫•t", "Gi·∫£m di·ªán t√≠ch canh t√°c", "Thay ƒë·ªïi m√πa v·ª•", "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng"],
      correct: 3,
      level: "advanced"
    }
  ],
  speaking: [
    {
      question: "C√°ch ph√°t √¢m ƒë√∫ng c·ªßa 'th' trong 'think':",
      options: ["/f/", "/Œ∏/", "/s/", "/t/"],
      correct: 1,
      level: "beginner"
    },
    {
      question: "C·ª•m t·ª´ n√†o ph√π h·ª£p ƒë·ªÉ b√†y t·ªè √Ω ki·∫øn?",
      options: ["I am thinking", "In my opinion", "Maybe I think", "I am believing"],
      correct: 1,
      level: "intermediate"
    },
    {
      question: "Trong thuy·∫øt tr√¨nh chuy√™n nghi·ªáp, c√°ch k·∫øt th√∫c ph√π h·ª£p:",
      options: ["That's all", "I'm done", "To conclude", "End of presentation"],
      correct: 2,
      level: "advanced"
    }
  ],
  reading: [
    {
      question: "Ch·ªß ƒë·ªÅ ch√≠nh c·ªßa ƒëo·∫°n vƒÉn v·ªÅ Sarah l√† g√¨?",
      options: ["C√¥ng vi·ªác", "Th√≥i quen h√†ng ng√†y", "S·ªü th√≠ch", "Gia ƒë√¨nh"],
      correct: 1,
      level: "beginner"
    },
    {
      question: "AI trong gi√°o d·ª•c ch·ªß y·∫øu gi√∫p:",
      options: ["Thay th·∫ø gi√°o vi√™n", "C√° nh√¢n h√≥a h·ªçc t·∫≠p", "Gi·∫£m chi ph√≠", "TƒÉng h·ªçc sinh"],
      correct: 1,
      level: "intermediate"
    },
    {
      question: "Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u c√≥ th·ªÉ gi·∫£m GDP to√†n c·∫ßu:",
      options: ["15%", "20%", "23%", "25%"],
      correct: 2,
      level: "advanced"
    }
  ],
  writing: [
    {
      question: "C·∫•u tr√∫c c√¢u c∆° b·∫£n trong ti·∫øng Anh:",
      options: ["V-S-O", "S-V-O", "O-S-V", "S-O-V"],
      correct: 1,
      level: "beginner"
    },
    {
      question: "C√°ch ch√†o trong email ch√≠nh th·ª©c:",
      options: ["Hi there!", "Hello!", "Dear Sir/Madam,",
        "Hey!"],
      correct: 2,
      level: "intermediate"
    },
    {
      question: "Ph·∫ßn n√†o c·ªßa b√°o c√°o n√™n vi·∫øt cu·ªëi c√πng?",
      options: [
        "Introduction",
        "Methodology",
        "Executive Summary",
        "Findings"
      ],
      correct: 2,
      level: "advanced"
    }
  ]
};

function initSkillCards() {
  const skillCards = document.querySelectorAll('.skill-card');

  skillCards.forEach(card => {
    const levelBtns = card.querySelectorAll('.level-btn');

    levelBtns.forEach(btn => {
      btn.addEventListener('click', function (e) {
        e.stopPropagation();
        const skill = card.dataset.skill;
        const level = this.dataset.level;
        showLessonModal(skill, level);
      });
    });
  });
}

function showLessonModal(skill, level) {
  const t = getCurrentTranslation();
  const modal = createModal(`${skill.charAt(0).toUpperCase() + skill.slice(1)} - ${getLevelName(level)}`);

  const skillData = lessonData[skill][level];

  const content = `
        <div class="lesson-nav">
            <button class="lesson-tab active" data-tab="lessons">${t.lesson.lessons}</button>
            <button class="lesson-tab" data-tab="exercises">${t.lesson.exercises}</button>
        </div>
        
        <div id="lessons-section" class="lesson-section active">
            <div class="lessons-list">
                ${skillData.lessons.map((lesson, index) => `
                    <div class="lesson-item" style="background: #f8fafc; padding: 1.5rem; border-radius: 12px; margin-bottom: 1rem;">
                        <h4 style="color: #2563eb; margin-bottom: 1rem;">${lesson.title}</h4>
                        <div>${lesson.content}</div>
                    </div>
                `).join('')}
            </div>
        </div>
        
        <div id="exercises-section" class="lesson-section">
            <div class="exercises-list">
                ${skillData.exercises.map((exercise, index) => `
                    <div class="exercise-item">
                        <h4>${currentLanguage === 'vi' ? 'C√¢u h·ªèi' : 'Question'} ${index + 1}</h4>
                        <p>${exercise.question}</p>
                        <div class="answer-options">
                            ${exercise.options.map((option, optIndex) => `
                                <div class="answer-option" data-question="${index}" data-answer="${optIndex}">
                                    ${String.fromCharCode(65 + optIndex)}. ${option}
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `).join('')}
                <button class="submit-btn" onclick="submitExercises('${skill}', '${level}')">
                    <i class="fas fa-check"></i> ${t.lesson.submit}
                </button>
            </div>
        </div>
    `;

  modal.querySelector('.modal-content').innerHTML += content;

  // Add tab switching functionality
  const tabs = modal.querySelectorAll('.lesson-tab');
  tabs.forEach(tab => {
    tab.addEventListener('click', function () {
      tabs.forEach(t => t.classList.remove('active'));
      this.classList.add('active');

      const sections = modal.querySelectorAll('.lesson-section');
      sections.forEach(s => s.classList.remove('active'));

      const targetSection = modal.querySelector(`#${this.dataset.tab}-section`);
      targetSection.classList.add('active');
    });
  });

  // Add answer selection functionality
  const answerOptions = modal.querySelectorAll('.answer-option');
  answerOptions.forEach(option => {
    option.addEventListener('click', function () {
      const questionIndex = this.dataset.question;
      const sameQuestion = modal.querySelectorAll(`[data-question="${questionIndex}"]`);
      sameQuestion.forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
    });
  });

  document.body.appendChild(modal);
  modal.style.display = 'flex';
}

function submitExercises(skill, level) {
  const t = getCurrentTranslation();
  const modal = document.querySelector('.modal');
  const selectedAnswers = modal.querySelectorAll('.answer-option.selected');

  let score = 0;
  const totalQuestions = lessonData[skill][level].exercises.length;

  selectedAnswers.forEach(answer => {
    const questionIndex = parseInt(answer.dataset.question);
    const answerIndex = parseInt(answer.dataset.answer);
    const correctAnswer = lessonData[skill][level].exercises[questionIndex].correct;

    if (answerIndex === correctAnswer) {
      score++;
    }
  });

  const percentage = Math.round((score / totalQuestions) * 100);

  const resultMessage = `${t.lesson.result}: ${score}/${totalQuestions} (${percentage}%)\n\n` +
    `${percentage >= 80 ? t.lesson.excellent :
      percentage >= 60 ? t.lesson.good :
        t.lesson.needPractice}`;

  alert(resultMessage);

  // Update progress
  updateProgress(skill, level, percentage);

  closeModal();
}

function showTestModal() {
  const t = getCurrentTranslation();
  const modal = createModal(t.test.title);

  const content = `
        <div class="test-intro" style="text-align: center; margin-bottom: 2rem;">
            <h3>${t.test.intro}</h3>
            <p>${t.test.description}</p>
            <p>${t.test.time}</p>
            <button class="btn btn-primary" onclick="startTest()" style="margin-top: 1rem;">
                <i class="fas fa-play"></i> ${t.test.start}
            </button>
        </div>
        
        <div id="test-content" style="display: none;">
            <div id="test-progress" style="margin-bottom: 2rem;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                    <span>C√¢u <span id="current-question">1</span>/12</span>
                    <span id="timer">30:00</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" id="test-progress-fill" style="width: 8.33%"></div>
                </div>
            </div>
            
            <div id="test-questions"></div>
            
            <div style="display: flex; justify-content: space-between; margin-top: 2rem;">
                <button class="btn btn-secondary" onclick="previousQuestion()" id="prev-btn" disabled>
                    <i class="fas fa-arrow-left"></i> ${t.test.previous}
                </button>
                <button class="btn btn-primary" onclick="nextQuestion()" id="next-btn">
                    ${t.test.next} <i class="fas fa-arrow-right"></i>
                </button>
            </div>
        </div>
    `;

  modal.querySelector('.modal-content').innerHTML += content;
  document.body.appendChild(modal);
  modal.style.display = 'flex';
}

let currentTestQuestion = 0;
let testAnswers = {};
let testTimer;
let allTestQuestions = [];

function startTest() {
  // Prepare all test questions
  allTestQuestions = [];
  Object.keys(testQuestions).forEach(skill => {
    testQuestions[skill].forEach(q => {
      allTestQuestions.push({ ...q, skill });
    });
  });

  // Shuffle questions
  allTestQuestions = allTestQuestions.sort(() => Math.random() - 0.5);

  document.querySelector('.test-intro').style.display = 'none';
  document.getElementById('test-content').style.display = 'block';

  // Add question navigator
  addQuestionNavigator();

  // Add keyboard navigation
  addKeyboardNavigation();

  showTestQuestion(0);
  startTimer();
}

function showTestQuestion(index) {
  const t = getCurrentTranslation();
  currentTestQuestion = index;
  const question = allTestQuestions[index];

  document.getElementById('current-question').textContent = index + 1;
  document.getElementById('test-progress-fill').style.width = `${((index + 1) / 12) * 100}%`;

  const questionsContainer = document.getElementById('test-questions');
  questionsContainer.innerHTML = `
        <div class="exercise-item">
            <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                <div style="background: ${getSkillColor(question.skill)}; color: white; padding: 0.5rem 1rem; border-radius: 8px; font-weight: 600;">
                    ${getSkillName(question.skill)}
                </div>
                <span style="color: #64748b; font-size: 0.9rem;">${getLevelName(question.level)}</span>
            </div>
            <h4>${currentLanguage === 'vi' ? 'C√¢u' : 'Question'} ${index + 1}</h4>
            <p>${question.question}</p>
            <div class="answer-options">
                ${question.options.map((option, optIndex) => `
                    <div class="answer-option ${testAnswers[index] === optIndex ? 'selected' : ''}" 
                         onclick="selectTestAnswer(${index}, ${optIndex})">
                        ${String.fromCharCode(65 + optIndex)}. ${option}
                    </div>
                `).join('')}
            </div>
        </div>
    `;
  // Update navigation buttons
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');

  prevBtn.disabled = index === 0;
  prevBtn.innerHTML = `<i class="fas fa-arrow-left"></i> ${t.test.previous}`;

  if (index === 11) {
    nextBtn.innerHTML = `<i class="fas fa-check"></i> ${t.test.finish}`;
    nextBtn.onclick = finishTest;
  } else {
    nextBtn.innerHTML = `${t.test.next} <i class="fas fa-arrow-right"></i>`;
    nextBtn.onclick = nextQuestion;
  }
  // Update question navigator
  updateQuestionNavigator();
}

function selectTestAnswer(questionIndex, answerIndex) {
  testAnswers[questionIndex] = answerIndex;

  // Update UI
  const options = document.querySelectorAll('.answer-option');
  options.forEach(opt => opt.classList.remove('selected'));
  options[answerIndex].classList.add('selected');

  // Update question navigator
  updateQuestionNavigator();
}

function nextQuestion() {
  if (currentTestQuestion < 11) {
    showTestQuestion(currentTestQuestion + 1);
  }
}

function previousQuestion() {
  if (currentTestQuestion > 0) {
    showTestQuestion(currentTestQuestion - 1);
  }
}

function startTimer() {
  let timeLeft = 30 * 60; // 30 minutes in seconds

  testTimer = setInterval(() => {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    document.getElementById('timer').textContent =
      `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

    if (timeLeft <= 0) {
      clearInterval(testTimer);
      finishTest();
    }
    timeLeft--;
  }, 1000);
}

function finishTest() {
  clearInterval(testTimer);
  const t = getCurrentTranslation();

  // Calculate results
  let totalScore = 0;
  const skillScores = { listening: 0, speaking: 0, reading: 0, writing: 0 };
  const skillCounts = { listening: 0, speaking: 0, reading: 0, writing: 0 };

  allTestQuestions.forEach((question, index) => {
    skillCounts[question.skill]++;
    if (testAnswers[index] === question.correct) {
      totalScore++;
      skillScores[question.skill]++;
    }
  });

  // Calculate percentages
  Object.keys(skillScores).forEach(skill => {
    skillScores[skill] = Math.round((skillScores[skill] / skillCounts[skill]) * 100);
  });

  const totalPercentage = Math.round((totalScore / 12) * 100);

  // Determine level
  let level = 'beginner';
  if (totalPercentage >= 75) level = 'advanced';
  else if (totalPercentage >= 50) level = 'intermediate';

  // Show results
  const modal = document.querySelector('.modal');
  modal.querySelector('.modal-content').innerHTML = `
        <div class="modal-header">
            <h2>${t.test.result}</h2>
            <button class="close-btn" onclick="closeModal()">&times;</button>
        </div>
        
        <div style="text-align: center; margin-bottom: 2rem;">
            <div style="font-size: 3rem; color: ${totalPercentage >= 75 ? '#10b981' : totalPercentage >= 50 ? '#f59e0b' : '#ef4444'}; margin-bottom: 1rem;">
                ${totalPercentage}%
            </div>
            <h3>${t.test.level}: ${getLevelName(level)}</h3>
            <p>${t.test.score}: ${totalScore}/12</p>
        </div>
        
        <div class="skills-results">
            <h4 style="margin-bottom: 1.5rem;">${t.test.details}:</h4>
            ${Object.keys(skillScores).map(skill => `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 1rem; background: #f8fafc; border-radius: 8px; margin-bottom: 1rem;">
                    <div>
                        <strong>${getSkillName(skill)}</strong>
                    </div>
                    <div style="color: ${skillScores[skill] >= 75 ? '#10b981' : skillScores[skill] >= 50 ? '#f59e0b' : '#ef4444'}; font-weight: 600;">
                        ${skillScores[skill]}%
                    </div>
                </div>
            `).join('')}
        </div>
        
        <div style="text-align: center; margin-top: 2rem;">
            <button class="btn btn-primary" onclick="closeModal(); scrollToSkills();">
                <i class="fas fa-graduation-cap"></i> ${t.test.startLearning}
            </button>
        </div>
    `;
}

function createModal(title) {
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h2>${title}</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
        </div>
    `;

  // Close modal when clicking outside
  modal.addEventListener('click', function (e) {
    if (e.target === modal) {
      closeModal();
    }
  });

  return modal;
}

function closeModal() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
  }
  if (testTimer) {
    clearInterval(testTimer);
  }
}

function getLevelName(level) {
  const levels = {
    beginner: 'C∆° b·∫£n',
    intermediate: 'Trung c·∫•p',
    advanced: 'N√¢ng cao'
  };
  return levels[level] || level;
}

function getSkillName(skill) {
  const skills = {
    listening: 'Listening (Nghe)',
    speaking: 'Speaking (N√≥i)',
    reading: 'Reading (ƒê·ªçc)',
    writing: 'Writing (Vi·∫øt)'
  };
  return skills[skill] || skill;
}

function getSkillColor(skill) {
  const colors = {
    listening: '#3b82f6',
    speaking: '#10b981',
    reading: '#f59e0b',
    writing: '#8b5cf6'
  };
  return colors[skill] || '#6b7280';
}

function initProgressTracking() {
  // Load progress from localStorage if available
  const savedProgress = localStorage.getItem('englishLearnerProgress');
  if (savedProgress) {
    const progress = JSON.parse(savedProgress);
    updateProgressDisplay(progress);
  }
}

function updateProgress(skill, level, score) {
  let progress = JSON.parse(localStorage.getItem('englishLearnerProgress') || '{}');

  if (!progress[skill]) {
    progress[skill] = {};
  }

  progress[skill][level] = Math.max(progress[skill][level] || 0, score);

  localStorage.setItem('englishLearnerProgress', JSON.stringify(progress));
  updateProgressDisplay(progress);
}

function updateProgressDisplay(progress) {
  Object.keys(progress).forEach(skill => {
    const skillProgress = progress[skill];
    const avgProgress = Object.values(skillProgress).reduce((a, b) => a + b, 0) / Object.values(skillProgress).length;

    const progressCard = document.querySelector(`.progress-card h4:contains("${getSkillName(skill).split(' ')[0]}")`);
    if (progressCard) {
      const progressBar = progressCard.parentElement.querySelector('.progress-fill');
      const progressText = progressCard.parentElement.querySelector('span');

      progressBar.style.width = `${avgProgress}%`;
      progressText.textContent = `${Math.round(avgProgress)}% ho√†n th√†nh`;
    }
  });
}

// Test navigation improvements
function goToQuestion(questionIndex) {
  if (questionIndex >= 0 && questionIndex < allTestQuestions.length) {
    showTestQuestion(questionIndex);
  }
}

function addQuestionNavigator() {
  const testContent = document.getElementById('test-content');
  if (testContent && !testContent.querySelector('.question-navigator')) {
    const navigator = document.createElement('div');
    navigator.className = 'question-navigator';
    navigator.innerHTML = `
      <div style="margin-bottom: 1rem; text-align: center;">
        <small style="color: #64748b;">${currentLanguage === 'vi' ? 'B·∫•m v√†o s·ªë ƒë·ªÉ chuy·ªÉn c√¢u' : 'Click number to jump to question'}</small>
      </div>
      <div style="display: grid; grid-template-columns: repeat(6, 1fr); gap: 0.5rem;">
        ${Array.from({ length: 12 }, (_, i) => `
          <button class="question-nav-btn" data-question="${i}" onclick="goToQuestion(${i})">
            ${i + 1}
          </button>
        `).join('')}
      </div>
    `;
    testContent.insertBefore(navigator, testContent.firstChild);
  }
}

function updateQuestionNavigator() {
  const navBtns = document.querySelectorAll('.question-nav-btn');
  navBtns.forEach((btn, index) => {
    btn.classList.remove('current', 'answered');
    if (index === currentTestQuestion) {
      btn.classList.add('current');
    }
    if (testAnswers[index] !== undefined) {
      btn.classList.add('answered');
    }
  });
}

// Keyboard navigation
function addKeyboardNavigation() {
  document.addEventListener('keydown', function (e) {
    if (!document.querySelector('.modal') || !document.getElementById('test-content')) return;

    if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
      e.preventDefault();
      previousQuestion();
    } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
      e.preventDefault();
      if (currentTestQuestion < 11) {
        nextQuestion();
      }
    } else if (e.key >= '1' && e.key <= '4') {
      e.preventDefault();
      const optionIndex = parseInt(e.key) - 1;
      selectTestAnswer(currentTestQuestion, optionIndex);
    }
  });
}

// Enhanced test navigation functionality